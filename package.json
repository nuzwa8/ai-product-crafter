{
  "name": "ai-product-crafter", 
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "@radix-ui/react-slot": "^1.0.2",
    "@radix-ui/react-select": "^2.0.0",
    "@radix-ui/react-progress": "^1.0.3",
    "@radix-ui/react-dialog": "^1.0.5",
    "@radix-ui/react-label": "^2.0.2",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.0.0",
    "lucide-react": "^0.263.1",
    "tailwind-merge": "^1.14.0",
    "tailwindcss-animate": "^1.0.7",
    "fabric": "^5.3.0",
    "jspdf": "^2.5.1",
    "html2canvas": "^1.4.1",
    "chroma-js": "^2.4.2"
  },
  "devDependencies": {
    "@types/react": "^18.2.15",
    "@types/react-dom": "^18.2.7",
    "@types/chroma-js": "^2.4.4",
    "@typescript-eslint/eslint-plugin": "^6.0.0",
    "@typescript-eslint/parser": "^6.0.0",
    "@vitejs/plugin-react": "^4.0.3",
    "autoprefixer": "^10.4.14",
    "eslint": "^8.45.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.3",
    "postcss": "^8.4.27",
    "tailwindcss": "^3.3.0",
    "typescript": "^5.0.2",
    "vite": "^4.4.5"
  }
}
```

### 2Ô∏è‚É£ **vite.config.ts** (Update existing file)
```typescript
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
  optimizeDeps: {
    include: ['fabric', 'jspdf', 'html2canvas', 'chroma-js']
  },
  build: {
    rollupOptions: {
      output: {
        manualChunks: {
          fabric: ['fabric'],
          pdf: ['jspdf'],
          canvas: ['html2canvas'],
          colors: ['chroma-js']
        }
      }
    }
  }
})
```

---

## üìÇ **NEW FILES TO CREATE:**

### 3Ô∏è‚É£ **src/types/template.ts** (New file)
```typescript
export interface TemplateGeneratorInputs {
  templateName: string;
  targetAudience: string;
  templateType: 'social-post' | 'instagram-story' | 'presentation' | 'flyer' | 'business-card';
  designTone: 'professional' | 'creative' | 'minimalist' | 'bold' | 'elegant';
  colorScheme: 'brand' | 'warm' | 'cool' | 'neutral' | 'vibrant';
  brandColors?: string[];
}

export interface TemplateDimensions {
  width: number;
  height: number;
}

export interface TemplateVariation {
  id: string;
  name: string;
  preview: string;
  colorScheme: string[];
}

export interface GeneratedTemplate {
  id: string;
  preview: string; // Base64 data URL
  metadata: {
    name: string;
    dimensions: TemplateDimensions;
    type: string;
    generatedAt: Date;
  };
  downloads: {
    png: { url: string; filename: string };
    jpg: { url: string; filename: string };
    svg: { url: string; filename: string };
    pdf: { url: string; filename: string };
  };
  variations: TemplateVariation[];
}

export interface DesignRule {
  layout: string;
  spacing: string;
  shapes: string;
  hierarchy: string;
}

export interface GenerationStep {
  message: string;
  duration: number;
}

export const TEMPLATE_DIMENSIONS: Record<string, TemplateDimensions> = {
  'social-post': { width: 1080, height: 1080 },
  'instagram-story': { width: 1080, height: 1920 },
  'presentation': { width: 1920, height: 1080 },
  'flyer': { width: 595, height: 842 }, // A4 in points
  'business-card': { width: 252, height: 144 } // 3.5x2 inches in points
};

export const GENERATION_STEPS: GenerationStep[] = [
  { message: "Analyzing your requirements...", duration: 800 },
  { message: "Selecting optimal layout...", duration: 1000 },
  { message: "Applying color psychology...", duration: 700 },
  { message: "Generating typography...", duration: 600 },
  { message: "Creating design elements...", duration: 900 },
  { message: "Finalizing template...", duration: 500 }
];
```

### 4Ô∏è‚É£ **src/lib/utils.ts** (New file)
```typescript
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export function downloadFile(dataUrl: string, filename: string) {
  const link = document.createElement('a');
  link.href = dataUrl;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

export function formatFileSize(bytes: number): string {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

export function sleep(ms: number): Promise<void> {
  return new Promise(resolve => setTimeout(resolve, ms));
}
```

### 5Ô∏è‚É£ **src/lib/design-rules.ts** (New file)  
```typescript
import { DesignRule } from '../types/template';
import chroma from 'chroma-js';

export const DESIGN_RULES: Record<string, DesignRule> = {
  professional: {
    layout: 'grid-aligned',
    spacing: 'generous-padding',
    shapes: 'geometric-clean',
    hierarchy: 'clear-structure'
  },
  creative: {
    layout: 'asymmetrical-dynamic',
    spacing: 'varied-rhythm',
    shapes: 'organic-artistic',
    hierarchy: 'expressive-flow'
  },
  minimalist: {
    layout: 'centered-balanced',
    spacing: 'maximum-whitespace',
    shapes: 'essential-only',
    hierarchy: 'subtle-elegant'
  },
  bold: {
    layout: 'impact-focused',
    spacing: 'tight-energetic',
    shapes: 'strong-geometric',
    hierarchy: 'dramatic-contrast'
  },
  elegant: {
    layout: 'refined-balanced',
    spacing: 'sophisticated-flow',
    shapes: 'graceful-curves',
    hierarchy: 'polished-structure'
  }
};

export const COLOR_PALETTES = {
  warm: ['#ff6b6b', '#ffa726', '#ffee58', '#fff3c4'],
  cool: ['#42a5f5', '#26c6da', '#66bb6a', '#e8f5e8'],
  neutral: ['#37474f', '#78909c', '#b0bec5', '#f5f5f5'],
  vibrant: ['#e91e63', '#ff5722', '#ff9800', '#ffe0b2']
};

export function generateColorPalette(scheme: string, brandColors?: string[]): string[] {
  if (scheme === 'brand' && brandColors && brandColors.length > 0) {
    return brandColors;
  }
  
  const palette = COLOR_PALETTES[scheme as keyof typeof COLOR_PALETTES];
  return palette || COLOR_PALETTES.neutral;
}

export function generateColorVariations(baseColors: string[], count: number = 3): string[][] {
  const variations: string[][] = [];
  
  for (let i = 0; i < count; i++) {
    const variation = baseColors.map(color => {
      const chromaColor = chroma(color);
      
      switch (i) {
        case 0:
          return chromaColor.brighten(0.5).hex();
        case 1:
          return chromaColor.darken(0.3).hex();
        case 2:
          return chromaColor.set('hsl.s', '*0.8').hex();
        default:
          return color;
      }
    });
    
    variations.push(variation);
  }
  
  return variations;
}

export function selectTypography(designTone: string): {
  heading: string;
  body: string;
  sizes: { heading: number; body: number; caption: number };
} {
  const typography = {
    professional: {
      heading: 'Inter, system-ui, sans-serif',
      body: 'Inter, system-ui, sans-serif',
      sizes: { heading: 32, body: 16, caption: 12 }
    },
    creative: {
      heading: 'Poppins, system-ui, sans-serif',
      body: 'Open Sans, system-ui, sans-serif',
      sizes: { heading: 36, body: 14, caption: 10 }
    },
    minimalist: {
      heading: 'Helvetica Neue, system-ui, sans-serif',
      body: 'Helvetica Neue, system-ui, sans-serif',
      sizes: { heading: 28, body: 16, caption: 12 }
    },
    bold: {
      heading: 'Montserrat, system-ui, sans-serif',
      body: 'Roboto, system-ui, sans-serif',
      sizes: { heading: 40, body: 16, caption: 12 }
    },
    elegant: {
      heading: 'Playfair Display, serif',
      body: 'Source Sans Pro, system-ui, sans-serif',
      sizes: { heading: 34, body: 16, caption: 12 }
    }
  };
  
  return typography[designTone as keyof typeof typography] || typography.professional;
}
```
